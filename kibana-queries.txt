# Cluster Health
GET /_cluster/health

# Cluster Nodes
GET /_cat/nodes?v

# List All the Indices 
GET /_cat/indices?v

# List All the Shards
GET /_cat/shards?v

# Create index
PUT /customers
{
  "settings": {
    "number_of_replicas": 2,
    "number_of_shards": 2
  }
}

# Insert document into index
POST /customers/_doc
{
  "name": "nikhil",
  "age": 12
}

# Insert document into index by specifying id
POST /customers/_doc/13
{
  "name": "lingam",
  "age": 14
}

# Fetch document by id
GET /customers/_doc/10

# Update the document, add new field in document
POST /customers/_update/10
{
  "doc": {
    "occupation": "cricket"
  }
}

# Update the document with script program
POST /customers/_update/10
{
  "script": {
    "source": "ctx._source.age++"
  }
}

# Update the document with script program with parameters
POST /customers/_update/10
{
  "script": {
    "source": "ctx._source.age += params.num",
    "params": {
      "num": 5
    }
  }
}

# Update the document with script program with parameters, noop means no update operation
POST /customers/_update/10
{
  "script": {
    "source": """
      if(ctx._source.age > 55){
        ctx._source.age -= params.num;
      } else {
        ctx.op = 'noop'; 
      }
    """,
    "params": {
      "num": 5
    }
  }
}

# Delete document by using script and update call
POST /customers/_update/10
{
  "script": {
    "source": """
      if(ctx._source.age > 55){
        ctx._source.age -= params.num;
      } else {
        ctx.op = 'delete'; 
      }
    """,
    "params": {
      "num": 5
    }
  }
}

# Execute script if document is found else insert the update document
POST /customers/_update/7
{
  "script": {
    "source": "ctx._source.age++"
  },
  "upsert": {
    "name": "dhoni",
    "age": 40,
    "role": "captain"
  }
}

# Replace documents by id
PUT /customers/_doc/7
{
  "name": "mahendra singh dhoni",
  "franchise": "csk",
  "age": 41
}

# Delete index
DELETE /customers

# Delete document from index by id
DELETE /customers/_doc/7

# Fetch Document from index
GET /customers/_doc/7



############## PRODUCTS INDEX #########################

# Create Index
PUT /products
{
    "settings": {
      "number_of_shards": 2,
      "number_of_replicas": 1
    }
}

# View All the documents in index
GET /products/_search
{
    "query": {
      "match_all": {}
    }
}

# Insert Document into index
POST /products/_doc/1
{
  "name": "chair",
  "in_stock": 40,
  "price": 100
}

# Bulk create|index|delete|update
POST /products/_bulk
{"create": { "_id": 2 } }
{ "name": "laptop", "in_stock": 10, "price": 50000 }
{"create": { "_id": 3 } }
{ "name": "mouse", "in_stock": 30, "price": 400}

# Bulk api for different indices
POST /_bulk
{"create": {"_index": "products","_id": 4}}
{ "name": "watch", "in_stock": 10, "price": 5000 }
{"update": {"_index": "products","_id": 3}}
{ "doc": {"name": "updated laptop"}}
{"delete": {"_index": "products","_id": 2}}

# Update the documents same like where clause
POST /products/_update_by_query
{
  "conflicts": "proceed", 
  "script": {
    "source": "ctx._source.in_stock -= params.num",
    "params": {
      "num": 1
    }
  },
  "query": {
    "match_all": {}
  }
}

# Delete documents by query
POST /products/_delete_by_query
{
  "query": {
    "match_all": {}
  }
}


# Analyzes the text
POST /_analyze
{
  "text": ["Hello@! my name   is Not NIKHIL:) !!!!"],
  "analyzer": "standard"
}

# Keyword fields are analyzed using keyword analyzers
POST /_analyze
{
  "text": ["Hello@! my name   is Not NIKHIL:) !!!!"],
  "analyzer": "keyword"
}

# Build custom analyzer
POST /_analyze
{
  "text": ["Hello@! my name   is Not NIKHIL:) !!!!"],
  "char_filter": [],
  "tokenizer": "standard",
  "filter": ["lowercase"]
}


# Coercion
PUT /coercion_test/_doc/1
{
    "cost": 7.4
}

# value is inserted coercion converts string to float
PUT /coercion_test/_doc/2
{
    "cost": "7.4"
}

# Throws exception
PUT /coercion_test/_doc/2
{
    "cost": "7.4m"
}

# _source value is still string itself
GET /coercion_test/_doc/2

# Array datatype
POST /_analyze
{
  "text": ["my name is", "unknown to me"],
  "analyzer": "standard"
}

# Create Index with Mappings
PUT /reviews
{
  "mappings": {
    "properties": {
      "rating": {"type": "float"},
      "content": {"type": "text"},
      "product_id": {"type": "integer"},
      "author": {
        "properties": {
          "first_name": {"type": "text"},
          "last_name": {"type": "text"},
          "email": {"type": "keyword"}
        }
      }
    }
  },
  "settings": {
    "number_of_replicas": 1,
    "number_of_shards": 1
  }
}

# Create index with mappings using dot notations
PUT /reviews_dot_notation
{
  "mappings": {
    "properties": {
      "rating": {"type": "float"},
      "content": {"type": "text"},
      "product_id": {"type": "integer"},
      "author.first_name": {"type": "text"},
      "author.last_name": {"type": "text"},
      "author.email": {"type": "keyword"}
    }
  },
  "settings": {
    "number_of_replicas": 1,
    "number_of_shards": 1
  }
}

# Retrieve mapping details of index
GET /reviews/_mapping

# Retrive specific field mappings
GET /reviews/_mapping/field/content

# Retrive inner field mappings
GET /reviews/_mapping/field/author.email

# Insert 
PUT /reviews/_doc/1
{
  "rating": 5.0,
  "content": "Awesome context",
  "product_id": 1,
  "author": {
    "first_name": "lingam",
    "last_name": "nikhil",
    "email": "lingam.nikhil@gmail.com"
  }
}

# Fetch index mappings
GET reviews_dot_notation/_mapping

# Add extra mapping field to existing index
PUT /reviews_dot_notation/_mapping
{
  "properties": {
    "created_at": { "type": "date" }
  }
}

# Fetch index mappings
GET reviews_dot_notation/_mapping

# Retrieve all documents in index
GET /reviews/_search
{
  "query": {
      "match_all": {}
    }
}

# Fetch specifix document by id
GET /reviews/_doc/1

# Delete index
DELETE /reviews

# Insert documents into review_dot_notation, Assumes mid night 00:00:00
POST /reviews_dot_notation/_doc/1
{
  "rating": 5.0,
  "content": "Awesome context",
  "product_id": 1,
  "created_at": "2022-11-01", 
  "author": {
    "first_name": "lingam",
    "last_name": "nikhil",
    "email": "lingam.nikhil@gmail.com"
  } 
}

# ISO 8601 time format
POST /reviews_dot_notation/_doc/2
{
  "rating": 3.0,
  "content": "Not bad, could watch it.",
  "product_id": 2,
  "created_at": "2022-11-01T10:30:45Z", 
  "author": {
    "first_name": "yuvraj",
    "last_name": "singh",
    "email": "yuvraj.singh@gmail.com"
  } 
}

# If not in UTC zone specify the offset time 
POST /reviews_dot_notation/_doc/3
{
  "rating": 4.0,
  "content": "Learnt many thing, i would recommend",
  "product_id": 3,
  "created_at": "2022-11-01T10:30:45+01:00", 
  "author": {
    "first_name": "sachin",
    "last_name": "tendulkar",
    "email": "sachin.tendulkar@gmail.com"
  } 
}

# Date in epoch
POST /reviews_dot_notation/_doc/4
{
  "rating": 5.0,
  "content": "I loved the detailed explanation!!!",
  "product_id": 2,
  "created_at": "1456011284000", 
  "author": {
    "first_name": "rohit",
    "last_name": "sharma",
    "email": "rohit.sharma@gmail.com"
  } 
}

# Without created_at field
POST /reviews_dot_notation/_doc/7
{
  "rating": 4.5,
  "content": "It's good",
  "product_id": 2,
  "author": {
    "first_name": "MS",
    "last_name": "Dhoni",
    "email": "ms.dhoni@gmail.com"
  } 
}

GET /reviews_dot_notation/_search
{
  "query": {
    "match_all": {}
  }
}

# Get All ILM Policies
GET _ilm/policy

# Get ILM policy of the index
GET /products/_ilm/explain

# Create policy
PUT /_ilm/policy/my-policy-1
{
  "policy": {
    "phases": {
      "delete": {
        "min_age": "15d",
        "actions": {
          "delete": {}
        }
      }
    }
  }
}

# Get Policy
GET /_ilm/policy/my-policy-1

# Create Index
PUT /test 
{
  "settings": {
    "number_of_replicas": 2,
    "number_of_shards": 2
  }
}

# Get ILM Policy
GET /test/_ilm/explain

# Apply policy to existing index
PUT /test/_settings
{ "lifecycle.name": "my-policy-1" }

# Get ILM Policy
GET /test/_ilm/explain

# Remove policy from index
POST /test/_ilm/remove?pretty

# Remove or all indices with pattern
POST /test-*/_ilm/remove

# Create policy
PUT /_ilm/policy/my-policy-1
{
  "policy": {
    "phases": {
      "delete": {
        "min_age": "15d",
        "actions": {
          "delete": {}
        }
      }
    }
  }
}

# Any change to the policy remove from all indices and re-add the policy
